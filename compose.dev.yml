version: '3.8'

services:
  postgres:
    image: postgis/postgis:17-3.5-alpine
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=smartfarm
      - POSTGRES_PASSWORD=dev_password
      - POSTGRES_DB=smartfarm
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U smartfarm -d smartfarm"]
      interval: 5s
      timeout: 5s
      retries: 5
    env_file:
      - ./backend/.env.development
    networks:
      - smartfarm-network

  flask-backend:
    build:
      context: ./backend
      dockerfile: docker/Dockerfile.dev
    ports:
      - "5001:5001"
    volumes:
      - ./backend:/app
      - ./backend/uploads:/app/uploads
      - ./backend/data:/app/data
      - ./backend/temp:/app/temp
    environment:
      - FLASK_DEBUG=1
      - FLASK_APP=run.py
    env_file:
      - ./backend/.env.development
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - smartfarm-network

  react-frontend:
    build:
      context: ./frontend
      dockerfile: docker/Dockerfile.dev
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:5001
      - NODE_ENV=development
      - NEXT_TELEMETRY_DISABLED=1
    depends_on:
      - flask-backend
    restart: unless-stopped
    networks:
      - smartfarm-network

networks:
  smartfarm-network:
    driver: bridge

volumes:
  postgres-data: 